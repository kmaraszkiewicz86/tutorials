READ COMMITTED

 

Rozpoczynamy od wykonania w bieÅ¼Ä…cej sesji prostego zapytania.  W domyÅ›lnym poziomie izolacji transakcji wykonujemy zwykÅ‚y SELECT i sprawdzamy poprawnoÅ›Ä‡ wyÅ›wietlonych danych.
-- krok 1 
-- ustawiamy poziom izolacji na READ COMMITED i sprawdzamy odczyt przykladowej tabelki
use Transakcje
go

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

select * from dbo.TabelkaTransakcje;
-- execute

W kroku 2 w drugiej sesji rozpoczynamy transakcjÄ™ i wykonujemy taki sam update jak poprzednio we wczeÅ›niejszym poziomie izolacji transakcji. Transakcja siÄ™ nie koÅ„czy, ale samo polecenie update tak.
-- krok 2
-- uruchamiamy transakcje, ale nie wykonujemy jej zakonczenia
-- domyslny poziomo izolacji â€“ READ COMMITTED
use Transakcje
go

BEGIN TRANSACTION
update dbo.TabelkaTransakcje
set kolumna2_var20 = 'xxxxxxx'
-- execute

W kroku 3 ponawiamy wykonanie komendy z kroku 1 â€“ w tym oddzielnym oknie (tam gdzie byÅ‚ select) i sprawdzamy jaki bÄ™dzie wynik polecenia. Pytanie â€“ jaki bÄ™dzie efekt koÅ„cowy? Co dostaniemy ?
-- krok 3
-- w pierwszej sesji wykonujemy ponownie komende z kroku 1
use Transakcje
go

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

select * from dbo.TabelkaTransakcje;
-- execute

 Jak moÅ¼na zaobserwowaÄ‡, w oknie z poleceniem SELECT (osobna transakcja) nie dostaliÅ›my Å¼adnego wyniku. Inaczej byÅ‚o w poprzednim przykÅ‚adzie, wynik byÅ‚, dostaliÅ›my dane, ktÃ³re byÅ‚y zmienione w trakcie trwania transakcji, teraz juÅ¼ nie mamy takiej moÅ¼liwoÅ›ci. Polecenie SELECT jest zablokowane do czasu, kiedy transakcja wykonujÄ…ca UPDATE siÄ™ albo nie zakoÅ„czy, albo zostanie cofniÄ™ta. Nie mamy juÅ¼ DIRTY READS.
Wykonamy w takim razie w kroku 4 w aktualnej transakcji update jej cofniÄ™cie. Pytanie â€“ co dostaniemy w drugim oknie sesji ?
-- krok 4
-- w sesji z trwajÄ…cÄ… transakcjÄ… wykonujemy cofniecie wykonanej transakcji
ROLLBACK TRANSACTION;
-- execute

Po cofniÄ™ciu transakcji w oknie z poleceniem SELECT mogliÅ›my zauwaÅ¼yÄ‡ wynik dziaÅ‚ania tej komendy. Widzimy, Å¼e SELECT trwa tak dÅ‚ugo, aÅ¼ wszystkie dane w stanie spÃ³jnym bÄ™dÄ… mogÅ‚y byÄ‡ odczytane i przedstawione koÅ„cowemu uÅ¼ytkownikowi. DÅ‚ugie UPDATEy spowalniajÄ… moÅ¼liwoÅ›Ä‡ wykonywania SELECTÃ³w, co nie?
A co z Non-repeatable read? Ten fenomen na tym poziomie izolacji transakcji powinien wystÄ™powaÄ‡, prawda ? To opowieÅ›Ä‡ o kwiatkach. SprawdÅºmy.
W aktualnym oknie (tam gdzie byÅ‚a wykonywana sesja z UPDATE) wykonujemy prostÄ… operacje sumowania za pomocÄ… polecenia SUM, otwieramy transakcje w domyÅ›lnym poziomie izolacji, ale jej nie koÅ„czymy.
-- krok 5
-- uruchamiamy w bieÅ¼Ä…cym oknie transakcje, ale nie wykonujemy jej zakonczenia
-- domyslny poziomo izolacji â€“ READ COMMITTED
use Transakcje
go

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

BEGIN TRANSACTION
select sum(kolumna1_PK)
from dbo.TabelkaTransakcje
-- execute

Wynik prezentowany na ekranie to â€“ 55. Suma danych w kolumnie id â€“ 1, 2, 4 itd. Tak powinno byÄ‡. W drugim oknie korzystajÄ…c z tego samego poziomu izolacji transakcji wykonujemy update jednego wiersza, zmieniamy wartoÅ›Ä‡ id (dziaÅ‚amy jako inna transakcja na tych danych).
-- krok 6
-- w drugim oknie wykonajmy w transakcji update wierszy zwiekszajac 10 do 100
use Transakcje
go

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
update dbo.TabelkaTransakcje
set kolumna1_PK = 100 where kolumna1_PK = 10;
go
â€“execute

 

Operacja update siÄ™ udaje, poniewaÅ¼ w otwartej transakcji mamy polecenie SELECT. WczeÅ›niej mieliÅ›my sytuacje odwrotnÄ…, wykonywaliÅ›my UPDATE i do rozpoczÄ™tego update nie mogliÅ›my wykonaÄ‡ SELECTA. Teraz moÅ¼emy. WiÄ™c w otwartej transakcji wykonajmy ponownie polecenie SELECT SUM. Co teraz otrzymamy?
-- krok 7
-- w oknie aktualnym (trwajÄ…ca sesja) kontynuujemy transakcje sprawdzajac sumÄ™ jak w kroku 5
select sum(kolumna1_PK)
from dbo.TabelkaTransakcje
â€“execute

Jako wynik dostaliÅ›my sumÄ™ rÃ³wnÄ… nie 55 ale 145. W tej samej transakcji !!! KoÅ„czymy transakcjÄ™ i przywracamy stan poczÄ…tkowy danych.
-- krok 8
-- konczymy transakcje i wracamy z danymi do stanu poczatkowego
update dbo.TabelkaTransakcje
set kolumna1_PK = 10 where kolumna1_PK = 100;
select sum(kolumna1_PK)
from dbo.TabelkaTransakcje;
go

COMMIT TRANSACTION
go

 

Jak widzimy, pojawiÅ‚o siÄ™ zjawisko Non-repeatable read. Czyli nie-powtarzalny odczyt. Jest on moÅ¼liwy w tym poziomie izolacji transakcji. Tak jak wspomniane dziewczynki z kwiatkami, rÃ³Å¼na liczba kwiatkÃ³w w czasie wypadku na Å‚Ä…kÄ™ tego samego dnia. Tak wiÄ™c naleÅ¼y uwaÅ¼aÄ‡ na selecty w dÅ‚ugo trwajÄ…cych transakcjach, ktÃ³re mogÄ… daÄ‡ inne dane jeÅ›li w miÄ™dzyczasie bÄ™dÄ… dziaÅ‚aÅ‚y updatey na danych. Aby nie byÅ‚o nie-powtarzalnych odczytÃ³w â€“ podnieÅ›my poziom izolacji transakcji ğŸ™‚

 